from pydoc import text
from re import A
import requests
from bs4 import BeautifulSoup
import html5lib
from selenium import webdriver
from selenium.webdriver.common.keys import Keys
import time
import linecache
import pandas as pd
import smtplib
from email.header import Header
from email.mime.text import MIMEText
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication 
import socket
import schedule
import json
import openpyxl
from PIL import ImageGrab, Image

print("--------------------")
print("번호를 입력하세요")
print("1 = 취약점 진단")
print("2 = 포트점검")
print("3 = 하위링크 확인")
print("--------------------")
i=int(input())

def study_1():
    url = "url"

    res = requests.get(url)

    soup = BeautifulSoup(res.content,'lxml')

    title = soup.select_one("head > title") #톰캣 버전정보 가져오기 apach tomcat/5.5

    title2 = title.text

    title2 = title2[7:]
    title2 = title2.replace('/', ' ') #apach tomcat/5.5를 tomcat 5.5로 바꾸기

    data = pd.read_csv("csv github link")

    des = data.iloc[: , 2:3] 
    des_rs = des[des['description'].str.contains(title2)] #판다스 이용해서 필요한부분 중 tomcat 5.5 포함된 내용 가져오기
    print(des_rs)

    f= open("취약점진단.txt","w",-1,"UTF-8")
    print(des_rs,file=f)

    f.close()



    send_email = "mail ID"
    send_pwd = "Mail PWD"

    recv_email = "receiver ID"

    smtp_name = "smtp.naver.com"
    smtp_port = 587

    msg = MIMEMultipart()

    msg['Subject'] ="취약점진단."
    msg['From'] = send_email 
    msg['To'] = recv_email 

    text = """
    취약점 진단
    """
    contentPart = MIMEText(text) 
    msg.attach(contentPart) 

    etc_file_path = r'취약점진단.txt'
    with open(etc_file_path, 'rb') as f : 
        etc_part = MIMEApplication( f.read() )
        etc_part.add_header('Content-Disposition','attachment', filename="취약점진단.txt")
        msg.attach(etc_part)

    s=smtplib.SMTP( smtp_name , smtp_port )
    s.starttls()
    s.login( send_email , send_pwd )
    s.sendmail( send_email, recv_email, msg.as_string() )
    s.quit()


def study_2():
    host='tomcat' #TOMCAT주소
    port=int(input("점검할 포트를 입력하세요: ")) #포트 입력 ex) 8180
    timeout_seconds=1
    a=0 # port가 열려있을 때 정상값으로 가정, port상태(코드에서 result값)과 비교하기 위한 값
    def mail():  #메일 전송 함수
        smtp = smtplib.SMTP('smtp.naver.com', 587)
        smtp.ehlo()
        smtp.starttls()
        print(smtp.login('id','pw')) #아이디 이메일 입력
        myemail = 'id@naver.com' #보내는사람
        youremail = 'id@naver.com' #받는사람
        subject = 'port에 변화가 생겼습니다.' #메일 제목
        message =  "포트에 변화가 생겼습니다." #내용
        msg = MIMEText(message.encode('utf-8'), _subtype='plain', _charset='utf-8')
        msg['Subject'] = Header(subject.encode('utf-8'), 'utf-8')
        msg['From'] = myemail
        msg['To'] = youremail
        smtp.sendmail(myemail,youremail,msg.as_string())
        smtp.quit()

    def slack(): #슬랙 전송 함수
        slack_url = "slack" #슬랙주소
        headers = {"Content-type":"application/json"}
        data = {"text":str(port)+"에 변화가 생겼습니다."}
        res = requests.post(slack_url, headers=headers, data=json.dumps(data))

    def scan(): #포트 스캔 함수 포트가 정상적으로 도는지 확인
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(timeout_seconds)
        result = sock.connect_ex((host,int(port)))
        if result == 0:
            print("Host: {}, Port: {} - True".format(host, port)) #result = 0 -> port open 
        else:
            print("Host: {}, Port: {} - False".format(host, port)) #포트 꺼졌을때
        if a==result: #포트 정상작동 확인
            pass
        else:
            select() #포트가 꺼졌을때
        sock.close()

    def select(): #포트가 꺼졌을 때 메일 슬랙 선택

        print("포트에 변화가 생겼습니다.")
        mes=int(input("담당자에게 메일 혹은 슬랙메시지를 보낼까요? 1. 예 2. 아니오:"))
        if mes==1:
            sel=int(input("1. 메일보내기 2.슬랙보내기: "))
            if sel==1:
                mail()
            else:
                slack()
        time.sleep(0.5)
        if port==8180:  #포트가 8180 이면 터미널(변화 확인 문구) 캡쳐 후 저장
            img= ImageGrab.grab()
            imgCrop = img.crop((250,900,1000,1000))
            saveas=f"port_error.png"
            imgCrop.save(saveas)
    
    

    schedule.every(3).seconds.do(scan) #하루 대신 3초로  시간단축
    


    while True:
        schedule.run_pending()
        time.sleep(1)


def study_3():

    # 셀레니움 실행
    excel = openpyxl.Workbook()
    sheet = excel.active
    sheet.append(["DNS_Info","Netblock","OS",'Site_reportPlink'])

    # 찾고싶은 도메인 입력
    DNS = input('DNS를 입력하세요 : ')
    driver = webdriver.Chrome()
    driver.get('https://searchdns.netcraft.com/')

    # 입력한 도메인의 하위도메인 검색
    elem = driver.find_element_by_css_selector('body > div.wrapper > main > div.hero.green-blue-gradient > div > div > div > form > div > input')
    elem.send_keys(DNS+Keys.RETURN)

    # 저장할 정보 검색
    DNSS = driver.find_elements_by_css_selector('body > div.wrapper > main > section:nth-child(2) > div > table > tbody > tr > td:nth-child(2) > a')
    Netblocks = driver.find_elements_by_css_selector('body > div.wrapper > main > section:nth-child(2) > div > table > tbody > tr > td:nth-child(4) > a')
    OSS = driver.find_elements_by_css_selector('body > div.wrapper > main > section:nth-child(2) > div > table > tbody > tr > td:nth-child(5) > a')
    Sitereports = driver.find_elements_by_css_selector('body > div.wrapper > main > section:nth-child(2) > div > table > tbody > tr > td:nth-child(6) > a')

    DNS_list =[]
    Netblock_list =[]
    OS_list =[]
    Sitereport_list =[]

    # 저장할 정보 리스트에 저장
    for dns in DNSS:
        href = dns.get_attribute('href')
        DNS_list.append(href)

    for Netblock in Netblocks:
        Netblock_list.append(Netblock.text)

    for OS in OSS:
        OS_list.append(OS.text)

    for Sitereport in Sitereports:
        href = Sitereport.get_attribute('href')
        Sitereport_list.append(href)

    # 사이트 캡쳐
    for i in range(0,5000,10):
        driver.execute_script(f"window.scrollTo(0,{i})")
        if (i==2500):
            png = driver.get_screenshot_as_png()
            open('DNS_INFO.png','wb').write(png)

    # 저장한 정보 엑셀로 출력
    for dns, netblock, os, sitereport in zip(DNS_list, Netblock_list, OS_list, Sitereport_list):
        sheet.append([dns,netblock,os,sitereport])

    excel.save('DNS_imformation.xlsx')

    time.sleep(1)


    # 이메일 보내기
    send_email = "id@naver.com"
    send_pwd = "password"

    recv_email = 'id@naver.com'

    smtp_name = "smtp.naver.com"
    smtp_port = 587

    msg = MIMEMultipart()

    msg['Subject'] ="DNS_imformation 정보 입니다."
    msg['From'] = send_email 
    msg['To'] = recv_email 

    text = """
    <h1>DNS_imformation 정보 입니다.</h1>
    감사합니다.
    """
    contentPart = MIMEText(text,'html') 
    msg.attach(contentPart) 

    etc_file_path = 'DNS_imformation.xlsx'
    with open(etc_file_path, 'rb') as f : 
        etc_part = MIMEApplication( f.read() )
        etc_part.add_header('Content-Disposition','attachment', filename="DNS_imformation.xlsx")
        msg.attach(etc_part)

    etc_file_path2 = 'DNS_INFO.png'
    with open(etc_file_path, 'rb') as f : 
        etc_part = MIMEApplication( f.read() )
        etc_part.add_header('Content-Disposition','attachment', filename="DNS_INFO.png")
        msg.attach(etc_part)

    s=smtplib.SMTP( smtp_name , smtp_port )
    s.starttls()
    s.login( send_email , send_pwd )
    s.sendmail( send_email, recv_email, msg.as_string() )
    s.quit()





if i == 1:
    study_1()

if i == 2:
    study_2()

if i==3:
    study_3()


    
